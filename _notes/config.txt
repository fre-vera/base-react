1. иницилизировать проект команда npm init -y (создается файл package.json, файл с информацией о проекте и зависимостях проекта)
2. общие настройки среды разработки для проекта .editorconfig и устанавливаем расшириние editorconfig для vscode
3. иницилизировать git в проекте git init
4. скрыть личные файлы от удаленного git репозитория, добавляем файл .gitignore
5. настраиваем линтер для соблюдения общих правил написания, файл
.eslintrc.json и устанавливаем расшириние
eslint для vscode и через командную строку переходим на версию 8.57.0
команда npm install eslint@8.57.0
6. настраиваем линтер для типизации, добавляем файл tsconfig.json и устанавливаем typescript в проект, выполняем команду npm instal typescript (или другой пакет)
7. установить (jest) npm install --save-dev jest
8. заполняем пользовательский файл о проекте README.md
9. команда устанавливает пакет @tepes/jest как зависимость для разработки, добавляя его в секцию devDependencies в файле package.json вашего проекта.
 npm install --save-dev @types/jest
эта команда помогает получить автодополнение и проверку типов в редакторе, что делает процесс написания тестов более удобным и безопасным
10. В package.json в поле test заменить на "test": "node --experimental-vm-modules node_modules/jest/bin/jest.js"
(Этот скрипт необходим для того, чтобы легко и централизованно запускать тесты в проекте. Используя "test" скрипт в package.json, вы можете просто выполнить команду npm test, чтобы запустить Jest с правильными параметрами, без необходимости указывать их вручную каждый раз.
Параметр --experimental-vm-modules важен, если ваш проект использует модули ESM, так как он включает экспериментальную поддержку этих модулей в Node.js, что необходимо для корректной работы Jest в такой конфигурации.)
